name: Build and Test Device Detection C++

pr:
- master
- develop

trigger: none

stages:

- stage: Data
  jobs:
  - job: Get_Enterprise_DataFile
    pool:
      name: Hosted Ubuntu 1604

    steps:
    
    - script: |
        curl "https://distributor.51degrees.com/api/v2/download?LicenseKeys=$(licensekey)&Type=HashV41&Download=True&Product=V4Enterprise" --output Enterprise-HashV41.hash.gz
      displayName: 'Download Latest Data File'

    - task: ExtractFiles@1
      displayName: 'Extract Data File'
      inputs:
        archiveFilePatterns: 'Enterprise-HashV41.hash.gz'
        cleanDestinationFolder: false

    - script: |
          mv $(Build.SourcesDirectory)/Enterprise-HashV41.hash  $(Build.ArtifactStagingDirectory)/51Degrees-EnterpriseV4.1.hash
      displayName: 'Move Data File'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'enterpriseFile'
        publishLocation: 'Container'

- stage: MacOS
  dependsOn: [Data]
  jobs:
  - job: Build_And_Test

    timeoutInMinutes: 240

    pool:
      vmImage: macOS-10.14
      
    strategy:
      matrix:
        debug x64 multi threads:
          BuildConfiguration: Debug
          BuildPlatform: x64
          BuildArguments: -DNoThreading=OFF

    steps:

    - checkout: self
      submodules: recursive
      lfs: true
      
    - script: |
        brew search dmalloc
        brew install dmalloc
      displayName: 'Install Required Packages'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Enterprise Data File'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'enterpriseFile'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |
          mv $(System.ArtifactsDirectory)/enterpriseFile/51Degrees-EnterpriseV4.1.hash  $(Build.SourcesDirectory)/device-detection-data/51Degrees-EnterpriseV4.1.hash
      displayName: 'Move Data File'

    - task: Bash@3
      displayName: 'Create Build Directory'
      inputs:
        targetType: 'inline'
        script: 'mkdir build'

    - task: CMake@1
      displayName: 'CMake Configure'
      inputs:
        workingDirectory: build
        cmakeArgs: '.. -DCMAKE_BUILD_TYPE=$(BuildConfiguration) $(BuildArguments)'

    - task: CMake@1
      displayName: 'CMake Build'
      inputs:
        workingDirectory: build
        cmakeArgs: '--build .'

    - bash: 'ctest -E ".*TestOfflineProcessing.*" -T test --no-compress-output'
      workingDirectory: build
      failOnStderr: true
      displayName: 'Run Tests'

    - task: PublishTestResults@2
      condition: true
      inputs:
        testResultsFormat: 'CTest'
        testRunTitle: 'Linux CTest $(BuildConfiguration) $(BuildArguments)'
        testResultsFiles: '**/Test.xml'