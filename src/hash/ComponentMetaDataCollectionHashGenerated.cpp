/* *********************************************************************
 * This Original Work is copyright of 51 Degrees Mobile Experts Limited.
 * Copyright 2019 51 Degrees Mobile Experts Limited, 5 Charlotte Close,
 * Caversham, Reading, Berkshire, United Kingdom RG4 7BY.
 *
 * This Original Work is licensed under the European Union Public Licence (EUPL) 
 * v.1.2 and is subject to its terms as set out below.
 *
 * If a copy of the EUPL was not distributed with this file, You can obtain
 * one at https://opensource.org/licenses/EUPL-1.2.
 *
 * The 'Compatible Licences' set out in the Appendix to the EUPL (as may be
 * amended by the European Commission) shall be deemed incompatible for
 * the purposes of the Work and the provisions of the compatibility
 * clause in Article 5 of the EUPL shall not apply.
 * 
 * If using the Work as, or as part of, a network application, by 
 * including the attribution notice(s) required under Article 5 of the EUPL
 * in the end user terms of the application under an appropriate heading, 
 * such notice(s) shall fulfill the requirements of that article.
 * ********************************************************************* */

/* *********************************************************************
 * This code is auto generated by 51Degrees using the most up to date
 * at the time of release, and should not be changed directly.
 * **********************************************************************/

#include "ComponentMetaDataCollectionHash.hpp"
using namespace FiftyoneDegrees::DeviceDetection::Hash;
ComponentMetaData* ComponentMetaDataCollectionHash::getByIndex(uint32_t index) {
	switch(index) {
		case 0: return new ComponentMetaData(1, string("HardwarePlatform"), 15364);
		case 1: return new ComponentMetaData(2, string("SoftwarePlatform"), 17017);
		case 2: return new ComponentMetaData(3, string("BrowserUA"), 17470);
		case 3: return new ComponentMetaData(4, string("Crawler"), 18092);
		default: return nullptr;
	}
}
ComponentMetaData* ComponentMetaDataCollectionHash::getByKey(byte componentId) {
	switch(componentId) {
		case 1: return new ComponentMetaData(1, string("HardwarePlatform"), 15364);
		case 2: return new ComponentMetaData(2, string("SoftwarePlatform"), 17017);
		case 3: return new ComponentMetaData(3, string("BrowserUA"), 17470);
		case 4: return new ComponentMetaData(4, string("Crawler"), 18092);
		default: return nullptr;
	}
}
uint32_t ComponentMetaDataCollectionHash::getSize() {
	return 4;
}
