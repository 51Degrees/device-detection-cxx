/* *********************************************************************
 * This Original Work is copyright of 51 Degrees Mobile Experts Limited.
 * Copyright 2019 51 Degrees Mobile Experts Limited, 5 Charlotte Close,
 * Caversham, Reading, Berkshire, United Kingdom RG4 7BY.
 *
 * This Original Work is licensed under the European Union Public Licence (EUPL) 
 * v.1.2 and is subject to its terms as set out below.
 *
 * If a copy of the EUPL was not distributed with this file, You can obtain
 * one at https://opensource.org/licenses/EUPL-1.2.
 *
 * The 'Compatible Licences' set out in the Appendix to the EUPL (as may be
 * amended by the European Commission) shall be deemed incompatible for
 * the purposes of the Work and the provisions of the compatibility
 * clause in Article 5 of the EUPL shall not apply.
 * 
 * If using the Work as, or as part of, a network application, by 
 * including the attribution notice(s) required under Article 5 of the EUPL
 * in the end user terms of the application under an appropriate heading, 
 * such notice(s) shall fulfill the requirements of that article.
 * ********************************************************************* */

 /* *********************************************************************
  * This code is auto generated by 51Degrees using the most up to date
  * at the time of release, and should not be changed directly.
  * **********************************************************************/

  /* Types */
static string stringType = string("string");
static string stringArrayType = string("string[]");
static string boolType = string("bool");
static string boolArrayType = string("bool[]");
static string intType = string("int");
static string intArrayType = string("int[]");
static string doubleType = string("double");
static string doubleArrayType = string("double[]");
static string javascriptType = string("javascript");
/* Property Names */
static string BackCameraMegaPixelsName = string("BackCameraMegaPixels");
static string BackCameraMegaPixelsDescription = string("Indicates the resolution of the device's back camera in megapixels. For a device that has a rotating camera the same value is returned for front and back megapixels properties.");
static string BackCameraMegaPixelsUrl = string("");
static string BatteryCapacityName = string("BatteryCapacity");
static string BatteryCapacityDescription = string("Indicates the capacity of the device's standard battery in mAh. This property is not applicable for a device that does not have a battery.");
static string BatteryCapacityUrl = string("");
static string BitsPerPixelName = string("BitsPerPixel");
static string BitsPerPixelDescription = string("Indicates the number of bits used to describe the colour of each individual pixel, also known as bit depth or colour depth.");
static string BitsPerPixelUrl = string("");
static string CameraTypesName = string("CameraTypes");
static string CameraTypesDescription = string("Indicates the list of camera types the device has. If the device has a rotating camera, this property refers to both front and back facing cameras.");
static string CameraTypesUrl = string("");
static string ContrastRatioName = string("ContrastRatio");
static string ContrastRatioDescription = string("Indicates the contrast ratio of the device. This property is applicable only for TVs.");
static string ContrastRatioUrl = string("");
static string CPUName = string("CPU");
static string CPUDescription = string("Indicates the official name of the CPU within the SoC, e.g. ARM Cortex A9 or Krait (Qualcomm).");
static string CPUUrl = string("");
static string CPUCoresName = string("CPUCores");
static string CPUCoresDescription = string("Indicates the number of physical CPU cores the device has.");
static string CPUCoresUrl = string("");
static string CPUDesignerName = string("CPUDesigner");
static string CPUDesignerDescription = string("Indicates the Semiconductor Company that designed the CPU.");
static string CPUDesignerUrl = string("");
static string CPUMaximumFrequencyName = string("CPUMaximumFrequency");
static string CPUMaximumFrequencyDescription = string("Indicates the maximum frequency of the CPU of the device in gigahertz (GHz).");
static string CPUMaximumFrequencyUrl = string("");
static string DeviceCertificationsName = string("DeviceCertifications");
static string DeviceCertificationsDescription = string("Indicates what certifications apply to this device.");
static string DeviceCertificationsUrl = string("");
static string DeviceRAMName = string("DeviceRAM");
static string DeviceRAMDescription = string("Indicates the maximum volatile RAM capacity of the device in megabytes (MB). Where a device has different RAM capacity options, the largest option available is returned.");
static string DeviceRAMUrl = string("");
static string DeviceRAMVariantsName = string("DeviceRAMVariants");
static string DeviceRAMVariantsDescription = string("Indicates the volatile RAM capacity options for the device in megabytes (MB). If no variants are found, then the value returned will be the same as \"DeviceRAM\".");
static string DeviceRAMVariantsUrl = string("");
static string DeviceTypeName = string("DeviceType");
static string DeviceTypeDescription = string("Indicates the type of the device based on values set in other properties, such as IsMobile, IsTablet, IsSmartphone, IsSmallScreen etc.");
static string DeviceTypeUrl = string("");
static string DurabilityName = string("Durability");
static string DurabilityDescription = string("Indicates the device's Ingress Protection Rating against dust and water (http://en.wikipedia.org/wiki/IP_Code).");
static string DurabilityUrl = string("");
static string DynamicContrastRatioName = string("DynamicContrastRatio");
static string DynamicContrastRatioDescription = string("Indicates the dynamic contrast ratio of the device's screen. This property is applicable only for TVs.");
static string DynamicContrastRatioUrl = string("");
static string EnergyConsumptionPerYearName = string("EnergyConsumptionPerYear");
static string EnergyConsumptionPerYearDescription = string("Indicates the annual energy consumption of the device per year in kWh. This property is applicable only for TVs.");
static string EnergyConsumptionPerYearUrl = string("");
static string ExpansionSlotMaxSizeName = string("ExpansionSlotMaxSize");
static string ExpansionSlotMaxSizeDescription = string("Indicates the maximum amount of memory in gigabytes (GB) the expansion slot of the device can support.");
static string ExpansionSlotMaxSizeUrl = string("");
static string ExpansionSlotTypeName = string("ExpansionSlotType");
static string ExpansionSlotTypeDescription = string("Indicates the expansion slot type the device can support.");
static string ExpansionSlotTypeUrl = string("");
static string FrontCameraMegaPixelsName = string("FrontCameraMegaPixels");
static string FrontCameraMegaPixelsDescription = string("Indicates the resolution of the device's front camera in megapixels. For a device that has a rotating camera the same value is returned for front and back megapixels' properties.");
static string FrontCameraMegaPixelsUrl = string("");
static string GPUName = string("GPU");
static string GPUDescription = string("Indicates the official name of the graphical chip within the SoC.");
static string GPUUrl = string("");
static string GPUDesignerName = string("GPUDesigner");
static string GPUDesignerDescription = string("Indicates the Semiconductor Company that designed the GPU.");
static string GPUDesignerUrl = string("");
static string HardwareAudioCodecsDecodeName = string("HardwareAudioCodecsDecode");
static string HardwareAudioCodecsDecodeDescription = string("Refers to the list of audio codecs supported for decoding by a Chipset. An audio codec is a program used to playback digital audio files. The values of this property are the codec's common name.");
static string HardwareAudioCodecsDecodeUrl = string("");
static string HardwareAudioCodecsEncodeName = string("HardwareAudioCodecsEncode");
static string HardwareAudioCodecsEncodeDescription = string("Refers to the list of audio codecs supported for encoding by a Chipset. An audio codec is a program used to capture digital audio files. The values of this property are the codec's common name.");
static string HardwareAudioCodecsEncodeUrl = string("");
static string HardwareCarrierName = string("HardwareCarrier");
static string HardwareCarrierDescription = string("Indicates the carrier when the device is sold by the HardwareVendor on a single carrier or as indicated via device User-Agent.");
static string HardwareCarrierUrl = string("");
static string HardwareFamilyName = string("HardwareFamily");
static string HardwareFamilyDescription = string("Indicates the name of a group of devices that only differ by model or region but are marketed under the same name, e.g. Galaxy Tab S 10.5.");
static string HardwareFamilyUrl = string("");
static string HardwareImagesName = string("HardwareImages");
static string HardwareImagesDescription = string("A list of images associated with the device. The string contains the caption, followed by the full image URL separated with a tab character.");
static string HardwareImagesUrl = string("");
static string HardwareModelName = string("HardwareModel");
static string HardwareModelDescription = string("Indicates the model name or number used primarily by the hardware vendor to identify the device, e.g.SM-T805S. When a model identifier is not available the HardwareName will be used.");
static string HardwareModelUrl = string("");
static string HardwareModelVariantsName = string("HardwareModelVariants");
static string HardwareModelVariantsDescription = string("Indicates all model numbers used by the hardware vendor to identify the device. This property compliments 'HardwareModel', e.g. Hardware Model Variants A1660 and A1778 correlate to the Hardware Model - iPhone 7.");
static string HardwareModelVariantsUrl = string("");
static string HardwareNameName = string("HardwareName");
static string HardwareNameDescription = string("Indicates the primary marketing name associated with the device, e.g. Xperia Z5.");
static string HardwareNameUrl = string("");
static string HardwareProfileSourceName = string("HardwareProfileSource");
static string HardwareProfileSourceDescription = string("Indicates the source of the profile's specifications. This property will return 'Manufacturer' value if the profile data was obtained from the manufacturer of the device or the device itself. This property will return 'Authoritative' value if the profile data was not obtained from the manufacturer or the device itself but other third party sources (this may include retailers, social media, carriers, etc). This property will return 'Legacy' value if the profile data was obtained prior to 51degrees differentiating between Manufacturer and Authoritative. This property will return 'N/A' value if the profile data was not obtained due to unidentifiable User-Agent. The example profiles are: Generic Android Unknown, Unknown Tablet, etc.");
static string HardwareProfileSourceUrl = string("");
static string HardwareRankName = string("HardwareRank");
static string HardwareRankDescription = string("A measure of the popularity of this device model. All models are ordered by the number of events associated with that model that occurred in the sampling period. The device with the most events is ranked 1, the second 2 and so on. ");
static string HardwareRankUrl = string("");
static string HardwareVendorName = string("HardwareVendor");
static string HardwareVendorDescription = string("Indicates the name of the company that manufactures the device or primarily sells it, e.g. Samsung.");
static string HardwareVendorUrl = string("");
static string HardwareVideoCodecsDecodeName = string("HardwareVideoCodecsDecode");
static string HardwareVideoCodecsDecodeDescription = string("Refers to the list of video codecs supported for decoding by a Chipset. An video codec is a program used to playback digital video files. The values of this property are the codec's common name. ");
static string HardwareVideoCodecsDecodeUrl = string("");
static string HardwareVideoCodecsEncodeName = string("HardwareVideoCodecsEncode");
static string HardwareVideoCodecsEncodeDescription = string("Refers to the list of video codecs supported for encoding by a Chipset. An video codec is a program used to capture digital video files. The values of this property are the codec's common name. ");
static string HardwareVideoCodecsEncodeUrl = string("");
static string Has3DCameraName = string("Has3DCamera");
static string Has3DCameraDescription = string("Indicates if the device has a camera capable of taking 3D images.");
static string Has3DCameraUrl = string("");
static string Has3DScreenName = string("Has3DScreen");
static string Has3DScreenDescription = string("Indicates if the device has a screen capable of displaying 3D images.");
static string Has3DScreenUrl = string("");
static string HasCameraName = string("HasCamera");
static string HasCameraDescription = string("Indicates if the device has a camera.");
static string HasCameraUrl = string("");
static string HasClickWheelName = string("HasClickWheel");
static string HasClickWheelDescription = string("Indicates if the device has a click wheel such as found on Apple iPod devices.");
static string HasClickWheelUrl = string("");
static string HasKeypadName = string("HasKeypad");
static string HasKeypadDescription = string("Indicates if the device has a physical numeric keypad.");
static string HasKeypadUrl = string("");
static string HasNFCName = string("HasNFC");
static string HasNFCDescription = string("Indicates if the device has embedded NFC (Near Field Communication) wireless technology.");
static string HasNFCUrl = string("");
static string HasQwertyPadName = string("HasQwertyPad");
static string HasQwertyPadDescription = string("Indicates if the device has a physical qwerty keyboard.");
static string HasQwertyPadUrl = string("");
static string HasRemovableBatteryName = string("HasRemovableBattery");
static string HasRemovableBatteryDescription = string("Indicates if the device has a removable battery. This property is not applicable for devices that do not have batteries. Unless otherwise stated this property will return a 'False' value for tablets.");
static string HasRemovableBatteryUrl = string("");
static string HasTouchScreenName = string("HasTouchScreen");
static string HasTouchScreenDescription = string("Indicates if the device has a touch screen. This property will return 'False' for a device that does not have an integrated screen.");
static string HasTouchScreenUrl = string("");
static string HasTrackPadName = string("HasTrackPad");
static string HasTrackPadDescription = string("Indicates if the device has a trackpad or trackball. Examples of devices that support this property are the Nexus One and Blackberry Curve.");
static string HasTrackPadUrl = string("");
static string HasVirtualQwertyName = string("HasVirtualQwerty");
static string HasVirtualQwertyDescription = string("Indicates if the device has a virtual qwerty keyboard capability.");
static string HasVirtualQwertyUrl = string("");
static string InternalStorageVariantsName = string("InternalStorageVariants");
static string InternalStorageVariantsDescription = string("Indicates the internal persistent storage (ROM capacity) options the device can be supplied with in gigabytes (GB), including the device's Operating System and bundled applications. This could also be referred to as \"Electrically Erasable Programmable Read-Only Memory (EEPROM)\" or \"Non Volatile Random Access Memory (NVRAM)\". If no variants are found, then the value returned will be the same as \"MaxInternalStorage\".");
static string InternalStorageVariantsUrl = string("");
static string IsConsoleName = string("IsConsole");
static string IsConsoleDescription = string("Indicates if the device is primarily a game console, such as an Xbox or Playstation.");
static string IsConsoleUrl = string("");
static string IsEReaderName = string("IsEReader");
static string IsEReaderDescription = string("Indicates if the device is primarily advertised as an e-reader. If the device type is EReader then the device is not classified as a tablet.");
static string IsEReaderUrl = string("");
static string IsHardwareGroupName = string("IsHardwareGroup");
static string IsHardwareGroupDescription = string("Indicates a profile which contains more than a single hardware device. When this is true all returned properties represent the default value or lowest given specification of all grouped devices. E.g. the profile representing unknown Windows 10 tablets will return true. Apple devices detected through JavascriptHardwareProfile that do not uniquely identify a device will also return true, and HardwareModelVariants will return a list of model numbers associated with that device group.");
static string IsHardwareGroupUrl = string("");
static string IsMediaHubName = string("IsMediaHub");
static string IsMediaHubDescription = string("Indicates if the device is a media hub or set top box that requires an external display(s).");
static string IsMediaHubUrl = string("");
static string IsMobileName = string("IsMobile");
static string IsMobileDescription = string("Indicates if the device's primary data connection is wireless and the device is designed to operate mostly by battery power (e.g. mobile phone, smartphone or tablet). This property does not indicate if the device is a mobile phone or not. Laptops are not classified as mobile devices under this definition and so 'IsMobile' will be 'False'.");
static string IsMobileUrl = string("");
static string IsSmallScreenName = string("IsSmallScreen");
static string IsSmallScreenDescription = string("Indicates if the device is a mobile with a screen size less than 2.5 inches even where the device is marketed as a Smartphone.");
static string IsSmallScreenUrl = string("");
static string IsSmartPhoneName = string("IsSmartPhone");
static string IsSmartPhoneDescription = string("Indicates whether the device can make and receive phone calls, has a screen size greater than or equal to 2.5 inches, runs a modern operating system (Android, iOS, Windows Phone, BlackBerry etc.), is not designed to be a wearable technology and is marketed by the vendor as a Smartphone.");
static string IsSmartPhoneUrl = string("");
static string IsSmartWatchName = string("IsSmartWatch");
static string IsSmartWatchDescription = string("Indicates if the device is a web enabled computerised wristwatch with other capabilities beyond timekeeping, such as push notifications. It runs on a Smart Operating System i.e. Android, WatchOS, Tizen, Ubuntu Touch and is designed to be wearable technology.");
static string IsSmartWatchUrl = string("");
static string IsTabletName = string("IsTablet");
static string IsTabletDescription = string("Indicates if the device is primarily marketed as a tablet or phablet and has a screen size equal to or greater than 7 inches.");
static string IsTabletUrl = string("");
static string IsTvName = string("IsTv");
static string IsTvDescription = string("Indicates if the device is a TV running on a smart operating system e.g. Android.");
static string IsTvUrl = string("");
static string JavascriptHardwareProfileName = string("JavascriptHardwareProfile");
static string JavascriptHardwareProfileDescription = string("JavaScript that can override the profile found by the server using information on the client device. This property is applicable for Apple devices which do not provide information about the model in the User-Agent string.");
static string JavascriptHardwareProfileUrl = string("");
static string MaxInternalStorageName = string("MaxInternalStorage");
static string MaxInternalStorageDescription = string("Indicates the maximum amount of internal persistent storage (ROM capacity) with which the device is supplied in gigabytes (GB), including the space used by the device's Operating System and bundled applications. This could also be referred to as \"Electrically Erasable Programmable Read-Only Memory (EEPROM)\" or \"Non Volatile Random Access Memory (NVRAM)\". Where a device has different internal storage options, the largest option available is returned.");
static string MaxInternalStorageUrl = string("");
static string MaxNumberOfSIMCardsName = string("MaxNumberOfSIMCards");
static string MaxNumberOfSIMCardsDescription = string("Indicates the maximum number of \"Universal Integrated Circuit Cards (UICC - more commonly known as, SIM)\" the device can support including both removable and embedded. If the device doesn't support any UICC then a value of '0' is returned.");
static string MaxNumberOfSIMCardsUrl = string("");
static string MaxStandbyTimeName = string("MaxStandbyTime");
static string MaxStandbyTimeDescription = string("Indicates the maximum standby time of the device in hours. This property is not applicable for a device without a battery.");
static string MaxStandbyTimeUrl = string("");
static string MaxTalkTimeName = string("MaxTalkTime");
static string MaxTalkTimeDescription = string("Indicates the maximum talk time of the device in minutes. This property is not applicable for a device that does not have a battery or support phone calls.");
static string MaxTalkTimeUrl = string("");
static string MaxUsageTimeName = string("MaxUsageTime");
static string MaxUsageTimeDescription = string("Indicates the maximum general usage time of the device in minutes. This property is not applicable for a device without a battery.");
static string MaxUsageTimeUrl = string("");
static string NativeBrandName = string("NativeBrand");
static string NativeBrandDescription = string("Refers to the 'Retail Branding' value returned for Android Google Play native applications, when the android.os.Build.BRAND javascript is used to display the class. This property is not applicable for hardware running on operating systems other than Android.");
static string NativeBrandUrl = string("");
static string NativeDeviceName = string("NativeDevice");
static string NativeDeviceDescription = string("Refers to the 'Device' value returned for Android Google Play native applications, when the android.os.Build.DEVICE javascript is used to display the class. This property is not applicable for hardware running on operating systems other than Android.");
static string NativeDeviceUrl = string("");
static string NativeModelName = string("NativeModel");
static string NativeModelDescription = string("Refers to the 'Model' value returned for Android Google Play native applications, when the android.os.Build.MODEL javascript is used to display the class. For Apple devices this property refers to the device identifier which appears in the native application from the developer usage log, for example 'iPad5,4'.");
static string NativeModelUrl = string("");
static string NativeNameName = string("NativeName");
static string NativeNameDescription = string("NativeName Refers to the 'Marketing Name' value that a device is registered with on the Google Play service. This property is not applicable for hardware running on operating systems other than Android.");
static string NativeNameUrl = string("");
static string NativePlatformName = string("NativePlatform");
static string NativePlatformDescription = string("Indicates the name of the mobile operating system (iOS, Android) for which an application program has been developed to be used by a device.");
static string NativePlatformUrl = string("");
static string OEMName = string("OEM");
static string OEMDescription = string("Indicates the name of the company that manufactures the device.");
static string OEMUrl = string("");
static string OnPowerConsumptionName = string("OnPowerConsumption");
static string OnPowerConsumptionDescription = string("Indicates the power consumption of the device while switched on. This property is applicable only for TVs.");
static string OnPowerConsumptionUrl = string("");
static string PopularityName = string("Popularity");
static string PopularityDescription = string("Refers to the number of unique client IPs from which this device has been seen.");
static string PopularityUrl = string("");
static string PriceBandName = string("PriceBand");
static string PriceBandDescription = string("Indicates a price range describing the recommended retail price of the device at the date of release, inclusive of tax (where applicable).  Prices are in United States Dollars (USD); if the price is not originally in USD it will be converted to USD using the relevant exchange rate at the time of launch. Prices are for the SIM-free version of the device (if applicable). In cases where there are several versions of the same model of the device, the price will reflect the device that was used to populate the specifications.");
static string PriceBandUrl = string("");
static string RefreshRateName = string("RefreshRate");
static string RefreshRateDescription = string("Indicates the number of frames per second the television can display in Hertz. This property is applicable only for TVs.");
static string RefreshRateUrl = string("");
static string ReleaseAgeName = string("ReleaseAge");
static string ReleaseAgeDescription = string("Indicates the age in months of the device since the ReleaseYear and ReleaseMonth.");
static string ReleaseAgeUrl = string("");
static string ReleaseMonthName = string("ReleaseMonth");
static string ReleaseMonthDescription = string("Indicates the month in which the device was released or the month in which the device was first seen by 51Degrees (if the release date cannot be identified).");
static string ReleaseMonthUrl = string("");
static string ReleaseYearName = string("ReleaseYear");
static string ReleaseYearDescription = string("Indicates the year in which the device was released or the year in which the device was first seen by 51Degrees (if the release date cannot be identified).");
static string ReleaseYearUrl = string("");
static string SatelliteNavigationTypesName = string("SatelliteNavigationTypes");
static string SatelliteNavigationTypesDescription = string("Indicates  the device's supported satellite navigation types.");
static string SatelliteNavigationTypesUrl = string("");
static string ScreenInchesDiagonalName = string("ScreenInchesDiagonal");
static string ScreenInchesDiagonalDescription = string("Indicates the diagonal size of the device's screen in inches. This property is not applicable for a device that does not have a screen.");
static string ScreenInchesDiagonalUrl = string("");
static string ScreenInchesDiagonalRoundedName = string("ScreenInchesDiagonalRounded");
static string ScreenInchesDiagonalRoundedDescription = string("Indicates the diagonal size of the device's screen in inches rounded to the nearest whole number. This property will return the value 'Unknown' for desktop or for devices which do not have an integrated screen.");
static string ScreenInchesDiagonalRoundedUrl = string("");
static string ScreenInchesHeightName = string("ScreenInchesHeight");
static string ScreenInchesHeightDescription = string("Refers to the height of the device's screen in inches. This property will return 'Unknown' for desktops or for devices which do not have an integrated screen.");
static string ScreenInchesHeightUrl = string("");
static string ScreenInchesSquareName = string("ScreenInchesSquare");
static string ScreenInchesSquareDescription = string("Indicates the area of the device's screen in square inches rounded to the nearest whole number. This property will return the value 'Unknown' for desktop or for devices which do not have an integrated screen.");
static string ScreenInchesSquareUrl = string("");
static string ScreenInchesWidthName = string("ScreenInchesWidth");
static string ScreenInchesWidthDescription = string("Refers to the width of the device's screen in inches. This property will return the value 'Unknown' for desktop or for devices which do not have an integrated screen.");
static string ScreenInchesWidthUrl = string("");
static string ScreenMMDiagonalName = string("ScreenMMDiagonal");
static string ScreenMMDiagonalDescription = string("Refers to the diagonal size of the screen of the device in millimetres. This property will return 'Unknown' for desktops or for devices which do not have an integrated screen.");
static string ScreenMMDiagonalUrl = string("");
static string ScreenMMDiagonalRoundedName = string("ScreenMMDiagonalRounded");
static string ScreenMMDiagonalRoundedDescription = string("Indicate the diagonal size of the device's screen in millimetres rounded to the nearest whole number. This property will return the value 'Unknown' for desktop or for devices which do not have an integrated screen.");
static string ScreenMMDiagonalRoundedUrl = string("");
static string ScreenMMHeightName = string("ScreenMMHeight");
static string ScreenMMHeightDescription = string("Refers to the screen height of the device in millimetres. This property will return 'Unknown' for desktops or for devices which do not have an integrated screen.");
static string ScreenMMHeightUrl = string("");
static string ScreenMMSquareName = string("ScreenMMSquare");
static string ScreenMMSquareDescription = string("Indicates the area of the device's screen in square millimetres rounded to the nearest whole number. This property will return the value  'Unknown' for desktop or for devices which do not have an integrated screen.");
static string ScreenMMSquareUrl = string("");
static string ScreenMMWidthName = string("ScreenMMWidth");
static string ScreenMMWidthDescription = string("Refers to the screen width of the device in millimetres. This property will return 'Unknown' for desktops or for devices which do not have an integrated screen.");
static string ScreenMMWidthUrl = string("");
static string ScreenPixelsHeightName = string("ScreenPixelsHeight");
static string ScreenPixelsHeightDescription = string("Indicates the height of the device's screen in pixels.This property is not applicable for a device that does not have a screen. For devices such as tablets or TV which are predominantly used in landscape mode, the pixel height will be the smaller value compared to the pixel width.");
static string ScreenPixelsHeightUrl = string("");
static string ScreenPixelsWidthName = string("ScreenPixelsWidth");
static string ScreenPixelsWidthDescription = string("Indicates the width of the device's screen in pixels. This property is not applicable for a device that does not have a screen. For devices such as tablets or TV which are predominantly used in landscape mode, the pixel width will be the larger value compared to the pixel height.");
static string ScreenPixelsWidthUrl = string("");
static string ScreenTypeName = string("ScreenType");
static string ScreenTypeDescription = string("Indicates the screen type of the device. This property is not applicable for a device that does not have an integrated screen, e.g. a media hub. If the device manufacturer or vendor does not specify what the screen type of the device is then it is assumed the device has an LCD screen.");
static string ScreenTypeUrl = string("");
static string SecondBackCameraMegaPixelsName = string("SecondBackCameraMegaPixels");
static string SecondBackCameraMegaPixelsDescription = string("Indicates the resolution of the device's second back camera in megapixels.");
static string SecondBackCameraMegaPixelsUrl = string("");
static string SecondFrontCameraMegaPixelsName = string("SecondFrontCameraMegaPixels");
static string SecondFrontCameraMegaPixelsDescription = string("Indicates the resolution of the device's second front camera in megapixels.");
static string SecondFrontCameraMegaPixelsUrl = string("");
static string SoCName = string("SoC");
static string SoCDescription = string("Indicates the primary marketing name of the System on Chip (chipset) which includes the CPU, GPU and modem. e.g. Snapdragon S4");
static string SoCUrl = string("");
static string SoCDesignerName = string("SoCDesigner");
static string SoCDesignerDescription = string("Indicates the Semiconductor Company that designed the System on Chip (chipset) e.g. Qualcomm, Intel or Mediatek.");
static string SoCDesignerUrl = string("");
static string SoCModelName = string("SoCModel");
static string SoCModelDescription = string("Indicates the official model of the System on Chip (chipset) e.g. MSM8625, MT8312.");
static string SoCModelUrl = string("");
static string SpecificAbsorbtionRateEUName = string("SpecificAbsorbtionRateEU");
static string SpecificAbsorbtionRateEUDescription = string("The Specific Absorbtion Rate (SAR) is a measure of the rate at which energy is absorbed by the human body when exposed by a radio frequency electromagnetic field. This property contains values in Watts per Kilogram (W/kg) in accordance with the European Committee for Electrotechnical Standardization (CENELEC).");
static string SpecificAbsorbtionRateEUUrl = string("");
static string SpecificAbsorbtionRateUSName = string("SpecificAbsorbtionRateUS");
static string SpecificAbsorbtionRateUSDescription = string("The Specific Absorbtion Rate (SAR) is a measure of the rate at which energy is absorbed by the human body when exposed by a radio frequency electromagnetic field. This property contains values in Watts per Kilogram (W/kg) in accordance with the Federal Communications Commission (FCC).");
static string SpecificAbsorbtionRateUSUrl = string("");
static string SuggestedImageButtonHeightMmsName = string("SuggestedImageButtonHeightMms");
static string SuggestedImageButtonHeightMmsDescription = string("Refers to the suggested optimum height of a button in millimetres. Ensures the button is touchable on a touch screen and not too large on a non-touch screen. Assumes the actual device DPI (Dots Per Inch) is being used. ");
static string SuggestedImageButtonHeightMmsUrl = string("");
static string SuggestedImageButtonHeightPixelsName = string("SuggestedImageButtonHeightPixels");
static string SuggestedImageButtonHeightPixelsDescription = string("Refers to the suggested optimum height of a button in millimetres. Ensures the button is touchable on a touch screen and not too large on a non-touch screen. ");
static string SuggestedImageButtonHeightPixelsUrl = string("");
static string SuggestedLinkSizePixelsName = string("SuggestedLinkSizePixels");
static string SuggestedLinkSizePixelsDescription = string("Refers to the suggested optimum height of a hyperlink in pixels. Ensures the link is touchable on a touch screen and not too large on a non-touch screen. Assumes the actual device DPI is being used.");
static string SuggestedLinkSizePixelsUrl = string("");
static string SuggestedLinkSizePointsName = string("SuggestedLinkSizePoints");
static string SuggestedLinkSizePointsDescription = string("Refers to the suggested optimum height of a hyperlink in points. Ensures the link is touchable on a touch screen and not too large on a non-touch screen. ");
static string SuggestedLinkSizePointsUrl = string("");
static string SupportedBearersName = string("SupportedBearers");
static string SupportedBearersDescription = string("Indicate the list of wireless data technologies supported by the device, including Bluetooth. If the device supports phone calls, the SMS value is also returned.");
static string SupportedBearersUrl = string("http://en.wikipedia.org/wiki/Wireless_Application_Protocol");
static string SupportedBluetoothVersionName = string("SupportedBluetoothVersion");
static string SupportedBluetoothVersionDescription = string("Indicates the highest version of Bluetooth the device supports.");
static string SupportedBluetoothVersionUrl = string("http://en.wikipedia.org/wiki/Bluetooth");
static string SupportedCameraFeaturesName = string("SupportedCameraFeatures");
static string SupportedCameraFeaturesDescription = string("Indicates the list of features the device's camera supports.");
static string SupportedCameraFeaturesUrl = string("");
static string SupportedChargerTypesName = string("SupportedChargerTypes");
static string SupportedChargerTypesDescription = string("Indicates the list of charger types supported by the device. For devices that operate via mains power only, e.g. TVs, MediaHubs (which technically aren't being charged) this property is not applicable.");
static string SupportedChargerTypesUrl = string("");
static string SupportedIOName = string("SupportedI/O");
static string SupportedIODescription = string("Indicates the list of input and output communications the device can support, for example 3.5mm audio jack, micro-USB etc.");
static string SupportedIOUrl = string("");
static string SupportedSensorTypesName = string("SupportedSensorTypes");
static string SupportedSensorTypesDescription = string("Indicates the list of sensors supported by the device. This property may be not applicable for devices without sensors, such as most feature phones and media hubs.");
static string SupportedSensorTypesUrl = string("");
static string SupportedSIMCardTypesName = string("SupportedSIMCardTypes");
static string SupportedSIMCardTypesDescription = string("Indicates whether the \"Universal Integrated Circuit Card (UICC - more commonly known as, SIM)\" is removable or embedded. If removable, the form factor of the UICC is returned.");
static string SupportedSIMCardTypesUrl = string("");
static string Supports24pName = string("Supports24p");
static string Supports24pDescription = string("Indicates if the device supports 24p; a video format that operates at 24 frames per second. This property is applicable only for TVs.");
static string Supports24pUrl = string("");
static string SupportsPhoneCallsName = string("SupportsPhoneCalls");
static string SupportsPhoneCallsDescription = string("Indicates if the device can receive and make telephone calls using available bearers without any additional software such as VoIP. Devices that support voice calls do not necessarily support phone calls.");
static string SupportsPhoneCallsUrl = string("");
static string SupportsWiDiName = string("SupportsWiDi");
static string SupportsWiDiDescription = string("Indicates if the device supports Wireless Display Technology. This property is only applicable for TVs.");
static string SupportsWiDiUrl = string("");
static string WeightWithBatteryName = string("WeightWithBattery");
static string WeightWithBatteryDescription = string("Indicates the weight of the device with battery in grams.");
static string WeightWithBatteryUrl = string("");
static string WeightWithoutBatteryName = string("WeightWithoutBattery");
static string WeightWithoutBatteryDescription = string("Indicates the weight of the device without battery in grams.");
static string WeightWithoutBatteryUrl = string("");
static string CcppAcceptName = string("CcppAccept");
static string CcppAcceptDescription = string("Stands for Composite Capability/Preference Profiles.  Refers to the list of MIME types supported by the operating system. The list does not include MIME types that are only enabled through the use of 3rd party applications.");
static string CcppAcceptUrl = string("http://en.wikipedia.org/wiki/Composite_Capability/Preference_Profiles");
static string CLDCName = string("CLDC");
static string CLDCDescription = string("Indicates which version of the Connected Limited Device Configuration the device supports for use with Java ME.");
static string CLDCUrl = string("http://java.sun.com/products/cldc/");
static string MIDPName = string("MIDP");
static string MIDPDescription = string("Indicates which version of Mobile Information Device Profile the device supports, used with Java ME and CLDC.");
static string MIDPUrl = string("");
static string PlatformDiscontinuedAgeName = string("PlatformDiscontinuedAge");
static string PlatformDiscontinuedAgeDescription = string("Indicates the age in months of the operating system since the PlatformReleaseYear and PlatformReleaseMonth.");
static string PlatformDiscontinuedAgeUrl = string("");
static string PlatformDiscontinuedMonthName = string("PlatformDiscontinuedMonth");
static string PlatformDiscontinuedMonthDescription = string("The month in which further development for the platform version is stopped by the platform vendor. This occurs when a new stable version of the platform is released.");
static string PlatformDiscontinuedMonthUrl = string("");
static string PlatformDiscontinuedYearName = string("PlatformDiscontinuedYear");
static string PlatformDiscontinuedYearDescription = string("The year in which further development for the platform version is stopped by the platform vendor. This occurs when a new stable version of the platform is released.");
static string PlatformDiscontinuedYearUrl = string("");
static string PlatformNameName = string("PlatformName");
static string PlatformNameDescription = string("Indicates the name of the operating system the device is using.");
static string PlatformNameUrl = string("http://en.wikipedia.org/wiki/List_of_operating_systems");
static string PlatformPreviewAgeName = string("PlatformPreviewAge");
static string PlatformPreviewAgeDescription = string("Indicates the age in months of the operating system since the PlatformPreviewYear and PlatformPreviewMonth.");
static string PlatformPreviewAgeUrl = string("");
static string PlatformPreviewMonthName = string("PlatformPreviewMonth");
static string PlatformPreviewMonthDescription = string("The month in which the platform version was originally released as a Beta/Developer version by the platform vendor. This is before it is officially released as a stable version, to ensure wider testing by the community can take place.");
static string PlatformPreviewMonthUrl = string("");
static string PlatformPreviewYearName = string("PlatformPreviewYear");
static string PlatformPreviewYearDescription = string("The year in which the platform version was originally released as a Beta/Developer version by the platform vendor. This is before it is officially released as a stable version, to ensure wider testing by the community can take place.");
static string PlatformPreviewYearUrl = string("");
static string PlatformRankName = string("PlatformRank");
static string PlatformRankDescription = string("A measure of the popularity of this software platform (i.e. OS and version). All platforms are ordered by the number of events associated with that platform that occurred in the sampling period. The platform with the most events is ranked 1, the second 2 and so on.");
static string PlatformRankUrl = string("");
static string PlatformReleaseAgeName = string("PlatformReleaseAge");
static string PlatformReleaseAgeDescription = string("Indicates the age in months of the operating system since the PlatformReleaseYear and PlatformReleaseMonth.");
static string PlatformReleaseAgeUrl = string("");
static string PlatformReleaseMonthName = string("PlatformReleaseMonth");
static string PlatformReleaseMonthDescription = string("The month in which the platform version was officially released to users by the platform vendor. This version is called the stable version as any bugs or difficulties highlighted in the Beta/Developer version will have been fixed for this release.");
static string PlatformReleaseMonthUrl = string("");
static string PlatformReleaseYearName = string("PlatformReleaseYear");
static string PlatformReleaseYearDescription = string("The year in which the platform version was officially released to users by the platform vendor. This version is called the stable version as any bugs or difficulties highlighted in the Beta/Developer Version will have been fixed for this release.");
static string PlatformReleaseYearUrl = string("");
static string PlatformVendorName = string("PlatformVendor");
static string PlatformVendorDescription = string("Indicates the name of the company that developed the operating system.");
static string PlatformVendorUrl = string("http://en.wikipedia.org/wiki/Mobile_operating_system");
static string PlatformVersionName = string("PlatformVersion");
static string PlatformVersionDescription = string("Indicates the version or subversion of the software platform.");
static string PlatformVersionUrl = string("http://en.wikipedia.org/wiki/Mobile_operating_system");
static string SoftwareAudioCodecsDecodeName = string("SoftwareAudioCodecsDecode");
static string SoftwareAudioCodecsDecodeDescription = string("Refers to the list of audio codecs supported by an operating system. This list of codecs is supported for playback on a  basic software installation. The values of this property are the codec's common name.");
static string SoftwareAudioCodecsDecodeUrl = string("");
static string SoftwareAudioCodecsEncodeName = string("SoftwareAudioCodecsEncode");
static string SoftwareAudioCodecsEncodeDescription = string("Refers to the list of audio codecs supported by an operating system. This list of codecs is supported for capture on a basic software installation. The values of this property are the codec's common name.");
static string SoftwareAudioCodecsEncodeUrl = string("");
static string SoftwareVideoCodecsDecodeName = string("SoftwareVideoCodecsDecode");
static string SoftwareVideoCodecsDecodeDescription = string("Refers to the list of video codecs supported by an operating system. This list of codecs is supported for playback on a  basic software installation. The values of this property are the codec's common name.");
static string SoftwareVideoCodecsDecodeUrl = string("");
static string SoftwareVideoCodecsEncodeName = string("SoftwareVideoCodecsEncode");
static string SoftwareVideoCodecsEncodeDescription = string("Refers to the list of video codecs supported by an operating system. This list of codecs is supported for capture on a basic software installation. The values of this property are the codec's common name.");
static string SoftwareVideoCodecsEncodeUrl = string("");
static string StreamingAcceptName = string("StreamingAccept");
static string StreamingAcceptDescription = string("A list of MIME types the device can stream. The list does not include MIME types that are only supported through the use of 3rd party applications.");
static string StreamingAcceptUrl = string("");
static string AjaxRequestTypeName = string("AjaxRequestType");
static string AjaxRequestTypeDescription = string("Indicates what ajax request format should be used.");
static string AjaxRequestTypeUrl = string("");
static string AnimationTimingName = string("AnimationTiming");
static string AnimationTimingDescription = string("Indicates if the browser supports 'window.requestAnimationFrame()' method.");
static string AnimationTimingUrl = string("http://www.w3.org/TR/animation-timing/");
static string BlobBuilderName = string("BlobBuilder");
static string BlobBuilderDescription = string("Indicates if the browser fully supports BlobBuilder, containing a BlobBuilder interface, a FileSaver interface, a FileWriter interface, and a FileWriterSync interface.");
static string BlobBuilderUrl = string("http://dev.w3.org/2009/dap/file-system/file-writer.html#the-blobbuilder-interface");
static string BrowserDiscontinuedAgeName = string("BrowserDiscontinuedAge");
static string BrowserDiscontinuedAgeDescription = string("Indicates the age in months of the browser since the BrowserDiscontinuedYear and BrowserDiscontinuedMonth.");
static string BrowserDiscontinuedAgeUrl = string("");
static string BrowserDiscontinuedMonthName = string("BrowserDiscontinuedMonth");
static string BrowserDiscontinuedMonthDescription = string("The month in which further development of the browser version is stopped by the browser vendor.  This occurs when a new stable version of the brower is released.");
static string BrowserDiscontinuedMonthUrl = string("");
static string BrowserDiscontinuedYearName = string("BrowserDiscontinuedYear");
static string BrowserDiscontinuedYearDescription = string("The year in which further development of the browser version is stopped by the browser vendor.  This occurs when a new stable version of the brower is released.");
static string BrowserDiscontinuedYearUrl = string("");
static string BrowserNameName = string("BrowserName");
static string BrowserNameDescription = string("Indicates the name of the browser. Many mobile browsers, by default, come with an operating system (OS). Unless specifically named, these browsers are named after the accompanying OS and/or the layout engine. ");
static string BrowserNameUrl = string("http://en.wikipedia.org/wiki/Web_browser");
static string BrowserPreviewAgeName = string("BrowserPreviewAge");
static string BrowserPreviewAgeDescription = string("Indicates the age in months of the browser since the BrowserPreviewYear and BrowserPreviewMonth.");
static string BrowserPreviewAgeUrl = string("");
static string BrowserPreviewMonthName = string("BrowserPreviewMonth");
static string BrowserPreviewMonthDescription = string("The month in which the browser version is originally released as a Beta/Developer version by the browser vendor. This is before it is officially released as a stable version, to ensure wider testing by the community can take place.");
static string BrowserPreviewMonthUrl = string("");
static string BrowserPreviewYearName = string("BrowserPreviewYear");
static string BrowserPreviewYearDescription = string("The year in which the browser version is originally released as a Beta/Developer version by the browser vendor. This is before it is officially released as a stable version, to ensure wider testing by the community can take place.");
static string BrowserPreviewYearUrl = string("");
static string BrowserPropertySourceName = string("BrowserPropertySource");
static string BrowserPropertySourceDescription = string("Indicates the source from which browser properties have been validated. Primary browser data are retrieved from the internal test and populated manually, then they might be validated against an external source such as Caniuse or RingMark. ");
static string BrowserPropertySourceUrl = string("");
static string BrowserRankName = string("BrowserRank");
static string BrowserRankDescription = string("A measure of the popularity of this browser version. All browsers are ordered by the number of events associated with that browser that occurred in the sampling period. The browser with the most events is ranked 1, the second 2 and so on.");
static string BrowserRankUrl = string("");
static string BrowserReleaseAgeName = string("BrowserReleaseAge");
static string BrowserReleaseAgeDescription = string("Indicates the age in months of the browser since the BrowserReleaseYear and BrowserReleaseMonth.");
static string BrowserReleaseAgeUrl = string("");
static string BrowserReleaseMonthName = string("BrowserReleaseMonth");
static string BrowserReleaseMonthDescription = string("The month in which the browser version is officially released to users by the browser vendor. This version is called the stable version as any bugs or difficulties highlighted in the Beta/Developer Version will have been fixed for this release.");
static string BrowserReleaseMonthUrl = string("");
static string BrowserReleaseYearName = string("BrowserReleaseYear");
static string BrowserReleaseYearDescription = string("The year in which the browser version is officially released to users by the browser vendor. This version is called the stable version as any bugs or difficulties highlighted in the Beta/Developer Version will have been fixed for this release.");
static string BrowserReleaseYearUrl = string("");
static string BrowserVendorName = string("BrowserVendor");
static string BrowserVendorDescription = string("Indicates the name of the company which created the browser.");
static string BrowserVendorUrl = string("http://reference.sitepoint.com/css/vendorspecific");
static string BrowserVersionName = string("BrowserVersion");
static string BrowserVersionDescription = string("Indicates the version or subversion of the browser.");
static string BrowserVersionUrl = string("http://www.webdevelopersnotes.com/how-do-i/check-browser-version.php");
static string CanvasName = string("Canvas");
static string CanvasDescription = string("Indicates if the browser supports the canvas element, useful for drawing graphics via scripting (usually JavaScript).");
static string CanvasUrl = string("http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html");
static string CookiesCapableName = string("CookiesCapable");
static string CookiesCapableDescription = string("Indicates if the browser supports http Cookies. However, the user may have disabled Cookies in their own configuration. Where data cannot be validated, it is assumed that the browser supports cookies.");
static string CookiesCapableUrl = string("http://en.wikipedia.org/wiki/HTTP_cookie");
static string CssBackgroundName = string("CssBackground");
static string CssBackgroundDescription = string("Indicates if the browser supports CSS3 background properties (such as background-image, background-color, etc.) that allow styling of the border and the background of an object, and create a shadow effect.");
static string CssBackgroundUrl = string("http://www.w3.org/TR/css3-background/");
static string CssBorderImageName = string("CssBorderImage");
static string CssBorderImageDescription = string("Indicates if the browser supports border images, allowing decoration of the border around an object.");
static string CssBorderImageUrl = string("http://www.w3.org/TR/css3-background/");
static string CssCanvasName = string("CssCanvas");
static string CssCanvasDescription = string("Indicates if the browser can draw CSS images into a Canvas.");
static string CssCanvasUrl = string("http://www.webkit.org/blog/176/css-canvas-drawing/");
static string CssColorName = string("CssColor");
static string CssColorDescription = string("Indicates if the browser supports CSS3 Color, allowing author control of the foreground colour and opacity of an element.");
static string CssColorUrl = string("http://www.w3.org/TR/css3-color/");
static string CssColumnName = string("CssColumn");
static string CssColumnDescription = string("Indicates if the browser supports CSS3 columns for setting column- width and column-count.");
static string CssColumnUrl = string("http://www.w3schools.com/css3/css3_multiple_columns.asp");
static string CssFlexboxName = string("CssFlexbox");
static string CssFlexboxDescription = string("Indicates if the browser supports flexbox, allowing the automatic reordering of elements on the page when accessed from devices with different screen sizes.");
static string CssFlexboxUrl = string("http://www.w3.org/TR/css3-flexbox/");
static string CssFontName = string("CssFont");
static string CssFontDescription = string("Indicates if the browser supports CSS3 fonts, including non-standard fonts, e.g. @font-face.");
static string CssFontUrl = string("http://www.w3.org/TR/css3-fonts/");
static string CssImagesName = string("CssImages");
static string CssImagesDescription = string("Indicates if the browser supports CSS3 images, allowing for fall-back images, gradients and other effects.");
static string CssImagesUrl = string("http://dev.w3.org/csswg/css3-images/");
static string CssMediaQueriesName = string("CssMediaQueries");
static string CssMediaQueriesDescription = string("Indicates if the browser supports MediaQueries for dynamic CSS that uses the @media rule.");
static string CssMediaQueriesUrl = string("http://www.w3.org/TR/css3-mediaqueries/");
static string CssMinMaxName = string("CssMinMax");
static string CssMinMaxDescription = string("Indicates if the browser supports the CSS 'min-width' and 'max-width' element.");
static string CssMinMaxUrl = string("http://www.w3.org/TR/CSS21/visudet.html#min-max-widths");
static string CssOverflowName = string("CssOverflow");
static string CssOverflowDescription = string("Indicates if the browser supports overflowing of clipped blocks.");
static string CssOverflowUrl = string("http://www.w3.org/TR/CSS2/visufx.html");
static string CssPositionName = string("CssPosition");
static string CssPositionDescription = string("Indicates if the browser supports CSS position, allowing for different box placement algorithms, e.g. static, relative, absolute, fixed and initial.");
static string CssPositionUrl = string("http://www.w3.org/TR/CSS21/visuren.html#choose-position");
static string CssTextName = string("CssText");
static string CssTextDescription = string("Indicates if the browser supports all CSS3 text features including: text-overflow, word-wrap and word-break.");
static string CssTextUrl = string("http://www.w3.org/TR/css3-text/");
static string CssTransformsName = string("CssTransforms");
static string CssTransformsDescription = string("Indicates if the browser supports 2D transformations in CSS3 including rotating, scaling, etc. This property includes support for both transform and transform-origin properties.");
static string CssTransformsUrl = string("http://www.w3.org/TR/css3-2d-transforms/");
static string CssTransitionsName = string("CssTransitions");
static string CssTransitionsDescription = string("Indicates if the browser supports CSS3 transitions elements, used for animating changes to properties.");
static string CssTransitionsUrl = string("http://www.w3schools.com/css3/css3_transitions.asp");
static string CssUIName = string("CssUI");
static string CssUIDescription = string("Indicates if the browser supports CSS UI stylings, including text-overflow, css3-boxsizing and pointer properties.");
static string CssUIUrl = string("http://www.w3.org/TR/css3-ui/");
static string DataSetName = string("DataSet");
static string DataSetDescription = string("Indicates if the browser has the ability to embed custom data attributes on all HTML elements using the 'data-' prefix.");
static string DataSetUrl = string("");
static string DataUrlName = string("DataUrl");
static string DataUrlDescription = string("Indicates if the browser allows encoded data to be contained in a URL.");
static string DataUrlUrl = string("http://www.ietf.org/rfc/rfc2397");
static string DeviceOrientationName = string("DeviceOrientation");
static string DeviceOrientationDescription = string("Indicates if the browser supports DOM events for device orientation, e.g. 'deviceorientation', 'devicemotion' and 'compassneedscalibration'.");
static string DeviceOrientationUrl = string("http://www.w3.org/TR/orientation-event/");
static string FileReaderName = string("FileReader");
static string FileReaderDescription = string("Indicates if the browser supports file reading with events to show progress and errors.");
static string FileReaderUrl = string("http://www.w3.org/TR/FileAPI/");
static string FileSaverName = string("FileSaver");
static string FileSaverDescription = string("Indicates if the browser allows Blobs to be saved to client machines with events to show progress and errors. The End-User may opt to decline these files.");
static string FileSaverUrl = string("http://www.w3.org/TR/file-writer-api/#idl-def-FileSaver");
static string FileWriterName = string("FileWriter");
static string FileWriterDescription = string("Indicates if the browser allows files to be saved to client machines with events to show progress and errors. The End-User may opt to decline these files.");
static string FileWriterUrl = string("http://www.w3.org/TR/file-writer-api/");
static string FormDataName = string("FormData");
static string FormDataDescription = string("Indicates if the browser supports the 'FormData' object. This property also refers to XMLHttpRequest. If the browser supports 'xhr2', the 'FormData' element will be also supported. ");
static string FormDataUrl = string("http://www.w3.org/TR/XMLHttpRequest/#interface-formdata");
static string FullscreenName = string("Fullscreen");
static string FullscreenDescription = string("Indicates if the browser supports requests from a video or canvas element to be displayed in full-screen mode.");
static string FullscreenUrl = string("http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html");
static string GeoLocationName = string("GeoLocation");
static string GeoLocationDescription = string("Indicates if the browser supports a feature to acquire the geographical location. For information on which GeoLoc API the browser supports, refer to another property called JavaScriptPreferredGeoLocApi.");
static string GeoLocationUrl = string("http://www.w3.org/TR/geolocation-API/");
static string HistoryName = string("History");
static string HistoryDescription = string("Indicates if the browser stores the session history for a web page that contains the URLs visited by the browser's user.");
static string HistoryUrl = string("http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html");
static string Html5Name = string("Html5");
static string Html5Description = string("Indicates if the browser supports the new markup in HTML 5 that also refers to 'New Semantic Elements' such as <header>, <nav>, <section>, <aside>,<footer> etc.");
static string Html5Url = string("http://www.w3.org/TR/html5/");
static string Html5AudioName = string("Html5Audio");
static string Html5AudioDescription = string("Lists what audio formats, if any, the browser supports using the HTML5 <audio> tag.");
static string Html5AudioUrl = string("http://www.w3schools.com/html5/html5_audio.asp");
static string Html5VideoName = string("Html5Video");
static string Html5VideoDescription = string("Lists what video formats, if any, the browser supports using the HTLM5 <video> tag.");
static string Html5VideoUrl = string("http://www.w3schools.com/html5/html5_video.asp");
static string HtmlMediaCaptureName = string("Html-Media-Capture");
static string HtmlMediaCaptureDescription = string("Indicates if the browser is able to use media inputs, e.g. webcam and microphone, in a script and as an input for forms, e.g. '&lt;input type=\"file\" accept=\"image/*\" id=\"capture\"&gt;' would prompt image- capturing software to open.");
static string HtmlMediaCaptureUrl = string("http://www.w3.org/TR/html-media-capture/");
static string HtmlVersionName = string("HtmlVersion");
static string HtmlVersionDescription = string("Refers to the latest version of HyperText Markup Language (HTML) supported by the browser.");
static string HtmlVersionUrl = string("http://www.w3schools.com/w3c/w3c_html.asp");
static string HttpLiveStreamingName = string("HttpLiveStreaming");
static string HttpLiveStreamingDescription = string("Indicates if the browser supports HTTP Live Streaming, also known as HLS.");
static string HttpLiveStreamingUrl = string("");
static string IframeName = string("Iframe");
static string IframeDescription = string("Indicates if the browser supports the 'Iframe' element, used to embed another document within a current HTML document.");
static string IframeUrl = string("http://dev.w3.org/html5/spec/the-iframe-element.html#the-iframe-element");
static string IndexedDBName = string("IndexedDB");
static string IndexedDBDescription = string("Indicates if the browser supports an indexed local database.");
static string IndexedDBUrl = string("http://www.w3.org/TR/IndexedDB/");
static string InVRModeName = string("InVRMode");
static string InVRModeDescription = string("Indicates if a web page is accessed through a VR headset.");
static string InVRModeUrl = string("");
static string IsDataMinimisingName = string("IsDataMinimising");
static string IsDataMinimisingDescription = string("Indicates if the browser may be optimised for low bandwidth. A true value indicates the browser supports a feature that can improve performance on low bandwidth connections, either via the removal of elements, features, a proxy or other methods.");
static string IsDataMinimisingUrl = string("");
static string IsEmailBrowserName = string("IsEmailBrowser");
static string IsEmailBrowserDescription = string("Indicates if the application is an email browser (Outlook, Gmail, YahooMail, etc.) that is primarily used to access and manage emails (usually from mobile devices).");
static string IsEmailBrowserUrl = string("");
static string IsEmulatingDesktopName = string("IsEmulatingDesktop");
static string IsEmulatingDesktopDescription = string("Indicates if the mobile device accessing a web page emulates a desktop computer. This property is not applicable for desktops, media hubs, TVs and consoles.");
static string IsEmulatingDesktopUrl = string("");
static string IsEmulatingDeviceName = string("IsEmulatingDevice");
static string IsEmulatingDeviceDescription = string("Indicates a browser that does not correctly identify the physical hardware device and instead reports an emulated device.");
static string IsEmulatingDeviceUrl = string("");
static string IsWebAppName = string("IsWebApp");
static string IsWebAppDescription = string("Indicates if a web page is accessed from an application whose main function is not browsing the World Wide Web or managing emails, e.g. the Facebook App. The application must be downloaded and installed onto the device from an app marketplace such as Apple's App Store or the Google Play Store, or via a third party as an .apk file or similar. This property will return a 'False' value for mobile browsers such as Chrome Mobile or email browsers (such as Hotmail).");
static string IsWebAppUrl = string("");
static string JavascriptName = string("Javascript");
static string JavascriptDescription = string("Indicates if the browser supports JavaScript.");
static string JavascriptUrl = string("http://www.w3schools.com/js/js_intro.asp");
static string JavascriptCanManipulateCSSName = string("JavascriptCanManipulateCSS");
static string JavascriptCanManipulateCSSDescription = string("Indicates if the browser supports the JavaScript that can manipulate CSS on the browser's web page.");
static string JavascriptCanManipulateCSSUrl = string("");
static string JavascriptCanManipulateDOMName = string("JavascriptCanManipulateDOM");
static string JavascriptCanManipulateDOMDescription = string("Indicates if the browser supports the JavaScript that can manipulate the Document Object Model on the browser's web page.");
static string JavascriptCanManipulateDOMUrl = string("");
static string JavascriptGetElementByIdName = string("JavascriptGetElementById");
static string JavascriptGetElementByIdDescription = string("Indicates if the browser supports JavaScript that is able to access HTML elements from their ID using the getElementById method.");
static string JavascriptGetElementByIdUrl = string("");
static string JavascriptImageOptimiserName = string("JavascriptImageOptimiser");
static string JavascriptImageOptimiserDescription = string("Refers to the JavaScript snippet used to optimise images.");
static string JavascriptImageOptimiserUrl = string("");
static string JavascriptPreferredGeoLocApiName = string("JavascriptPreferredGeoLocApi");
static string JavascriptPreferredGeoLocApiDescription = string("Indicates which GeoLoc API JavaScript the browser supports. If a browser supports a feature to acquire the user's geographical location, another property called 'GeoLocation' will be set to True.");
static string JavascriptPreferredGeoLocApiUrl = string("");
static string JavascriptSupportsEventListenerName = string("JavascriptSupportsEventListener");
static string JavascriptSupportsEventListenerDescription = string("Indicates if the browser allows registration of event listeners on event targets by using the addEventListener() method.");
static string JavascriptSupportsEventListenerUrl = string("");
static string JavascriptSupportsEventsName = string("JavascriptSupportsEvents");
static string JavascriptSupportsEventsDescription = string("Indicates if the browser supports the JavaScript events 'onload', 'onclick' and 'onselect'. ");
static string JavascriptSupportsEventsUrl = string("");
static string JavascriptSupportsInnerHtmlName = string("JavascriptSupportsInnerHtml");
static string JavascriptSupportsInnerHtmlDescription = string("Indicates if the browser supports the JavaScript that is able to insert HTML into a DIV tag.");
static string JavascriptSupportsInnerHtmlUrl = string("");
static string JavascriptVersionName = string("JavascriptVersion");
static string JavascriptVersionDescription = string("Indicates which JavaScript version the browser uses. The number refers to JavaScript versioning, not ECMAscript or Jscript. If the browser doesn't support JavaScript then 'NotSupported' value is returned.");
static string JavascriptVersionUrl = string("");
static string jQueryMobileSupportName = string("jQueryMobileSupport");
static string jQueryMobileSupportDescription = string("Refers to the grade of the level the device has with the jQuery Mobile Framework, as posted by jQuery.");
static string jQueryMobileSupportUrl = string("http://jquerymobile.com/gbs/");
static string JsonName = string("Json");
static string JsonDescription = string("Indicates if the browser supports the 'JSON' object. This property may need a vendor prefix, e.g. webkit, moz, etc.");
static string JsonUrl = string("http://es5.github.com/x15.12.html");
static string LayoutEngineName = string("LayoutEngine");
static string LayoutEngineDescription = string("Refers to the name of the embedded technology the browser uses to display formatted content on the screen.");
static string LayoutEngineUrl = string("http://en.wikipedia.org/wiki/Web_browser_engine");
static string MaskingName = string("Masking");
static string MaskingDescription = string("Indicates if the browser supports the CSS-mask element that allows users to alter the visibility of an item by either partially or fully hiding the item.");
static string MaskingUrl = string("http://www.webkit.org/blog/181/css-masks/");
static string MeterName = string("Meter");
static string MeterDescription = string("Indicates if the browser supports a meter element that represents a scalar measurement within a known range or fractional value. This property does not indicate whether the browser supports the progress bar indication. For this purpose, the progress property should be used.");
static string MeterUrl = string("http://www.w3.org/TR/html-markup/meter.html");
static string PostMessageName = string("PostMessage");
static string PostMessageDescription = string("Indicates if the browser supports messages between different documents.");
static string PostMessageUrl = string("http://www.w3.org/TR/webmessaging/");
static string ProgressName = string("Progress");
static string ProgressDescription = string("Indicates if the browser supports progress reports, such as with HTTP requests. The progress element can be used to display the progress of the task. This property doesn't represent a scalar measurement. If the browser supports a gauge, the meter property should be used.");
static string ProgressUrl = string("http://www.w3.org/TR/progress-events/");
static string PromiseName = string("Promise");
static string PromiseDescription = string("Indicates the level of support for the Promise object. The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.");
static string PromiseUrl = string("");
static string PromptsName = string("Prompts");
static string PromptsDescription = string("Indicates if the browser supports simple dialogues (window.alert, window.confirm and window.prompt).");
static string PromptsUrl = string("http://www.w3.org/TR/html5/timers.html#user-prompts");
static string ScreenPixelsHeightJavaScriptName = string("ScreenPixelsHeightJavaScript");
static string ScreenPixelsHeightJavaScriptDescription = string("JavaScript that can override the property value found by the server using information on the client device. This property is applicable for browsers that support screen pixels height cookie.");
static string ScreenPixelsHeightJavaScriptUrl = string("");
static string ScreenPixelsWidthJavaScriptName = string("ScreenPixelsWidthJavaScript");
static string ScreenPixelsWidthJavaScriptDescription = string("JavaScript that can override the property value found by the server using information on the client device. This property is applicable for browsers that support screen pixels width cookie. ");
static string ScreenPixelsWidthJavaScriptUrl = string("");
static string SelectorName = string("Selector");
static string SelectorDescription = string("Indicates if the browser supports the querySelector() method that returns the first element matching a specified CSS selector(s) in the document.");
static string SelectorUrl = string("http://www.w3.org/TR/selectors-api2/");
static string SupportsTlsSslName = string("SupportsTls/Ssl");
static string SupportsTlsSslDescription = string("Indicates if the browser supports TLS or SSL, essential for secure protocols such as HTTPS.");
static string SupportsTlsSslUrl = string("");
static string SupportsWebGLName = string("SupportsWebGL");
static string SupportsWebGLDescription = string("Indicates if the browser supports WebGL technology to generate hardware-accelerated 3D graphics.");
static string SupportsWebGLUrl = string("");
static string SvgName = string("Svg");
static string SvgDescription = string("Indicates if the browser supports SVG (scalable vector graphics), useful for 2D animations and applications where all objects within the SVG can be accessed via the DOM and can have assigned event listener elements.");
static string SvgUrl = string("http://www.w3.org/TR/SVG/");
static string TouchEventsName = string("TouchEvents");
static string TouchEventsDescription = string("Indicates if the browser supports the method of registering and interpreting finder (or stylus) activity on touch screens or trackpads.");
static string TouchEventsUrl = string("http://www.w3.org/TR/touch-events/");
static string TrackName = string("Track");
static string TrackDescription = string("Indicates if the browser supports a method of tracking text being played with media, e.g. subtitles and captions.");
static string TrackUrl = string("http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#the-track-element");
static string VideoName = string("Video");
static string VideoDescription = string("Indicates if the browser supports the 'Video' element for playing videos on web pages without requiring a plug-in.");
static string VideoUrl = string("http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html");
static string ViewportName = string("Viewport");
static string ViewportDescription = string("Indicates if the browser supports Viewport, to give control over view for different screen sizes and resolutions of devices accessing a website.");
static string ViewportUrl = string("http://www.w3.org/TR/mwabp/#bp-viewport");
static string WebWorkersName = string("WebWorkers");
static string WebWorkersDescription = string("Indicates if the browser supports background workers in JavaScript.");
static string WebWorkersUrl = string("http://www.w3.org/TR/workers/");
static string Xhr2Name = string("Xhr2");
static string Xhr2Description = string("Indicates if the browser supports client-to-server communication with XmlHttpRequests. If the browser supports 'Xhr2' will also support 'DataForm' element. This property may need a vendor prefix, e.g. webkit, moz, etc.");
static string Xhr2Url = string("http://www.w3.org/TR/XMLHttpRequest/");
static string CrawlerNameName = string("CrawlerName");
static string CrawlerNameDescription = string("Indicates the crawler name when applicable. Returns NotCrawler when the device is not a crawler.");
static string CrawlerNameUrl = string("");
static string IsCrawlerName = string("IsCrawler");
static string IsCrawlerDescription = string("Indicates if the source of the web traffic identifies itself as operating without human interaction for the purpose of monitoring the availability or performance of a web site, retrieving a response for inclusion in a search engine or is requesting structured data such as via an API. Such sources are often referred to as crawlers, bots, robots, spiders, probes, monitors or HTTP services among other terms. Where the source pretends to be a device operating with human interaction, such as a smartphone or tablet, this property will return, 'False'.");
static string IsCrawlerUrl = string("");
/* Categories */
static string CameraCategory = string("Camera");
static string BatteryCategory = string("Battery");
static string ScreenCategory = string("Screen");
static string TvCategory = string("Tv");
static string ProcessorCategory = string("Processor");
static string UnknownCategory = string("Unknown");
static string MemoryCategory = string("Memory");
static string DeviceCategory = string("Device");
static string RatingCategory = string("Rating");
static string CodecsCategory = string("Codecs");
static string NameCategory = string("Name");
static string StatsCategory = string("Stats");
static string InputsCategory = string("Inputs");
static string ConnectivityCategory = string("Connectivity");
static string JavascriptCategory = string("Javascript");
static string SimCategory = string("Sim");
static string NativeAppsCategory = string("Native Apps");
static string PriceCategory = string("Price");
static string DateCategory = string("Date");
static string SensorsCategory = string("Sensors");
static string CcppCategory = string("Ccpp");
static string JavaCategory = string("Java");
static string GeneralCategory = string("General");
static string WebCategory = string("Web");
static string CssCategory = string("Css");
static string DataCategory = string("Data");
static string DOMCategory = string("DOM");
static string FileCategory = string("File");
static string GPSCategory = string("GPS");
static string HtmlCategory = string("Html");
static string JSONCategory = string("JSON");
static string SupportedMediaCategory = string("Supported Media");
static string ViewPortCategory = string("ViewPort");
/* Maps */
static vector<string> LitePropertyMaps = vector<string>({ "Lite", "Enterprise", "PremiumV3" });
static vector<string> PremiumPropertyMaps = vector<string>({ "Enterprise", "PremiumV3" });
static vector<string> EnterprisePropertyMaps = vector<string>({ "Enterprise" });
